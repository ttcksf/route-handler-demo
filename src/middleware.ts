import { NextResponse, type NextRequest } from 'next/server';

export function middleware(request: NextRequest) {
  // 2.クッキーを作成(アプリケーションのCookiesを確認)
  const response = NextResponse.next();
  const themeReference = request.cookies.get('theme');
  if (!themeReference) {
    response.cookies.set('theme', 'dark');
  }
  // 3.ヘッダーを作成(ネットワークの/profileをクリックしてヘッダーを確認)
  response.headers.set('custom-header', 'custom-value');
  return response;

  // 1.profileにアクセスしたらトップページにリダイレクト
  // if (request.nextUrl.pathname === '/profile') {
  //   return NextResponse.redirect(new URL('/', request.url));
  // }
}
// どこでミドルウェアを設定したか
export const config = {
  matcher: '/profile',
};

// 前回、Reactにおけるクライアントサイドレンダリングについて学びました。また、クライアントサイドレンダリングの欠点についても学びました。その欠点には2つの主要な課題があります。

// SEOへの影響: クライアントサイドでコンテンツをレンダリングするためにJavaScriptに依存しているため、検索エンジンがコンテンツを適切にインデックスすることが困難になり、SEOに悪影響を及ぼします。
// 遅いロード時間: ブラウザがJavaScriptをダウンロードして解析し、実行する必要があるため、ユーザーが有意義なコンテンツを見る前に、ロード時間が遅くなる可能性があります。
// これらの欠点を克服するために、GatsbyやNext.jsのようなモダンなReactフレームワークは、サーバーサイドレンダリングへと方向転換しました。

// サーバーサイドレンダリングの仕組み
// サーバーサイドレンダリングでは、リクエストが来たときに、クライアントサイドのJavaScriptに依存するほとんど空のHTMLファイルを送るのではなく、サーバーが完全なHTMLをレンダリングします。この完全なHTMLドキュメントは、ブラウザに直接送信されます。

// サーバーでHTMLが生成されるため、ブラウザは迅速に解析して表示することができ、初期ページのロード時間が改善されます。サーバーサイドアプローチは、クライアントサイドレンダリングに関連する問題を効果的に解決します。

// SEOの改善: 検索エンジンはサーバーレンダリングされたコンテンツを簡単にインデックスできるため、SEOが大幅に改善されます。
// 高速な表示: ユーザーは空白の画面やローディングスピナーを見る代わりに、すぐにページのHTMLコンテンツを見ることができます。
// サーバーサイドレンダリングの課題
// しかし、SSRのアプローチには、特にページのインタラクティブ性に関する複雑さがあります。ページの完全なインタラクティブ性は、React自体とアプリケーション固有のコードを含むJavaScriptバンドルがブラウザによって完全にダウンロードされ、実行されるまで保留されます。この重要なフェーズは、「ハイドレーション」と呼ばれ、サーバーによって最初に提供された静的なHTMLページに命が吹き込まれる過程です。

// ハイドレーション中、Reactはブラウザ内で制御を取り、サーバーから提供された静的なHTMLに基づいてコンポーネントツリーをメモリ内に再構築します。インタラクティブ要素の配置を慎重に計画し、次にReactは必要なJavaScriptロジックをこれらの要素にバインドします。これには、アプリケーションの状態を初期化し、クリックやマウスオーバーなどのアクションに対するイベントハンドラーをアタッチし、完全にインタラクティブなユーザーエクスペリエンスに必要なその他の動的な機能を設定することが含まれます。

// ハイドレーションは、今後進むにつれて重要な概念となるため、学んだことをしっかり理解しておいてください。

// サーバーサイドレンダリングの戦略
// サーバーサイドレンダリングのソリューションは、2つの戦略に分類できます。

// 静的サイト生成（SSG）: アプリケーションがサーバーにデプロイされるときに発生し、ページはすでにレンダリングされ、提供する準備ができています。頻繁に変更されないコンテンツ（ブログ投稿など）に最適です。
// サーバーサイドレンダリング（SSR）: ユーザーのリクエストに応えてオンデマンドでページをレンダリングします。パーソナライズされたコンテンツ（ログインしたユーザーに依存するHTMLなど）に適しています。
// 通常、これらはまとめて「サーバーサイドレンダリング」または「SSR」と呼ばれます。
