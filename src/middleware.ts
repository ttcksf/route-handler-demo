import { NextResponse, type NextRequest } from 'next/server';

export function middleware(request: NextRequest) {
  // 2.クッキーを作成(アプリケーションのCookiesを確認)
  const response = NextResponse.next();
  const themeReference = request.cookies.get('theme');
  if (!themeReference) {
    response.cookies.set('theme', 'dark');
  }
  // 3.ヘッダーを作成(ネットワークの/profileをクリックしてヘッダーを確認)
  response.headers.set('custom-header', 'custom-value');
  return response;

  // 1.profileにアクセスしたらトップページにリダイレクト
  // if (request.nextUrl.pathname === '/profile') {
  //   return NextResponse.redirect(new URL('/', request.url));
  // }
}
// どこでミドルウェアを設定したか
export const config = {
  matcher: '/profile',
};

// Reactのレンダリングを完全に理解するために、過去10年間にわたるReactのレンダリングの進化について知る必要があります。このビデオと次の数本では、Reactがどのようにレンダリング戦略を進化させてきたかを理解しましょう。

// もしあなたが開発の世界にしばらくいるのであれば、Reactがシングルページアプリケーションを作成するための定番ライブラリだったことを覚えているでしょう。典型的なシングルページアプリケーションでは、クライアントがリクエストを行うと、サーバーは単一のHTMLページをブラウザに送信します。このHTMLページは、通常、シンプルなdivタグと、JavaScriptファイルへの参照のみを含んでいます。

// 以下は、Reactアプリのスキャフォールディングに使用されるツールであるcreate react appのHTMLファイルの例です。空のdivタグと、bundle.jsへの参照があります。

// このJavaScriptファイルには、Reactライブラリ自体と、あなたのアプリケーションコードを含む、アプリケーションの実行に必要なすべてのものが含まれています。これは、HTMLファイルが解析されるときにダウンロードされます。ダウンロードされたJavaScriptコードは、次にあなたのコンピュータ上でHTMLを生成し、それをルートdiv要素の下のDOMに挿入します。そして、ユーザーインターフェイスがブラウザに表示されます。

// このプロセスは、DOMインスペクターでHTMLが表示されるのを見ることができますが、ビューソースオプションでは表示されません。ビューソースオプションには、サーバーからブラウザに送信されたHTMLファイルが表示されます。

// コンポーネントコードが直接ブラウザ内でユーザーインターフェイスに変換されるこのレンダリング方法は、クライアントサイドレンダリングと呼ばれます。クライアントサイドレンダリングは、シングルページアプリケーションの標準となり、広く採用されました。しかし、すぐに開発者は、このアプローチにいくつかの固有の欠点があることに気づき始めました。

// まず、主に単一のdivタグを含むHTMLを生成することは、SEOにとって最適ではありません。検索エンジンがインデックスするコンテンツがほとんどないからです。大きなバンドルサイズと、深くネストされたコンポーネントからのAPIレスポンスのためのネットワークリクエストのウォーターフォールは、意味のあるコンテンツがクローラーによってインデックスされるのに十分な速さでレンダリングされない可能性があります。

// 第二に、ブラウザがすべての作業、つまりデータのフェッチ、UIの計算、HTMLをインタラクティブにすることを処理すると、速度が低下する可能性があります。ユーザーは、ページがロードされている間に空白の画面やローディングスピナーが表示されることがあります。この問題は、アプリケーションに追加される新しい機能ごとにJavaScriptバンドルのサイズが増加するため、時間の経過とともに悪化します。これにより、ユーザーがUIを見るまでの待ち時間が長くなります。この遅延は、インターネット接続が遅いユーザーにとって特に顕著です。

// クライアントサイドレンダリングは、今日私たちが慣れているインタラクティブなウェブアプリケーションの基礎を築きましたが、SEOとパフォーマンスを向上させるために、開発者はより良いソリューションを探し始めました。次のビデオでは、2番目のレンダリング手法を探索し、クライアントサイドレンダリングの限界をどのように解決するかを理解しましょう。
